version: "3.9"
services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    environment: [ALLOW_ANONYMOUS_LOGIN=yes]
    ports: ["2181:2181"]

  kafka:
    image: bitnami/kafka:3.7
    depends_on: [zookeeper]
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,EXTERNAL://:9094,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    ports: ["9092:9092","9094:9094"]

  mongo:
    image: mongo:7
    ports: ["27017:27017"]
    volumes: ["mongo_data:/data/db"]

  redis:
    image: redis:7
    ports: ["6379:6379"]

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    env_file: .env
    depends_on: [kafka, mongo, redis]
    ports: ["8000:8000"]

  crawler-service:
    build:
      context: .
      dockerfile: crawler-service/Dockerfile
    env_file: .env
    depends_on: [kafka, mongo, redis]

  cleaner-normalizer:
    build:
      context: .
      dockerfile: cleaner-normalizer/Dockerfile
    env_file: .env
    depends_on: [kafka, mongo]

  claim-extractor:
    build:
      context: .
      dockerfile: claim-extractor/Dockerfile
    env_file: .env
    depends_on: [kafka, mongo]

  qdrant:
    image: qdrant/qdrant:v1.10.0
    ports: ["6333:6333"]
    volumes: ["qdrant_data:/qdrant/storage"]

  retriever:
    build:
      context: .
      dockerfile: retriever/Dockerfile
    env_file: .env
    depends_on: [kafka, mongo, redis, qdrant]

  verifier:
    build:
      context: .
      dockerfile: verifier/Dockerfile
    env_file: .env
    depends_on: [kafka, mongo]

  scoring-aggregator:
    build:
      context: .
      dockerfile: scoring-aggregator/Dockerfile
    env_file: .env
    depends_on: [kafka, mongo]    

volumes:
  mongo_data:
  qdrant_data:
